// Copyright (c) 2023, Cogent Core. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package enumgen

import (
	"os"
	"strings"
	"testing"

	"cogentcore.org/core/cli"
	"cogentcore.org/core/enums"
	"cogentcore.org/core/enums/enumgen/testdata"
	"github.com/stretchr/testify/assert"
)

func TestGenerate(t *testing.T) {
	c := &Config{}
	assert.NoError(t, cli.SetFromDefaults(c))
	c.Dir = "./testdata"
	assert.NoError(t, Generate(c))
	have, err := os.ReadFile("testdata/enumgen.go")
	assert.NoError(t, err)
	want, err := os.ReadFile("testdata/enumgen.golden")
	assert.NoError(t, err)
	// ignore first line, which has "Code generated by" message
	// that can change based on where go test is run.
	_, shave, got := strings.Cut(string(have), "\n")
	if !got {
		t.Errorf("expected string with newline in testdata/enumgen.go, but got %q", have)
	}
	_, swant, got := strings.Cut(string(want), "\n")
	if !got {
		t.Errorf("expected string with newline in testdata/enumgen.golden, but got %q", want)
	}
	swant = strings.ReplaceAll(swant, "\r\n", "\n")
	if shave != swant {
		t.Errorf("expected generated file and expected file to be the same after the first line, but they are not (compare ./testdata/enumgen.go and ./testdata/enumgen.golden to see the difference)")
	}
}

func TestFruitsString(t *testing.T) {
	assert.Equal(t, "Peach", testdata.Peach.String())
}

func TestFruitsSetString(t *testing.T) {
	src := "apricot"
	want := testdata.Apricot
	var have testdata.Fruits
	assert.NoError(t, have.SetString(src))
	assert.Equal(t, want, have)
}

func TestFoodsString(t *testing.T) {
	assert.Equal(t, "Blackberry", testdata.Foods(testdata.Blackberry).String())
}

func TestFoodsString1(t *testing.T) {
	assert.Equal(t, "Cheese", testdata.Cheese.String())
}

func TestFoodsSetString(t *testing.T) {
	src := "apricot"
	want := testdata.Foods(testdata.Apricot)
	var have testdata.Foods
	assert.NoError(t, have.SetString(src))
	assert.Equal(t, want, have)
}

func TestFoodsSetString1(t *testing.T) {
	src := "Bread"
	want := testdata.Bread
	var have testdata.Foods
	assert.NoError(t, have.SetString(src))
	assert.Equal(t, want, have)
}

func TestFoodsIsValid(t *testing.T) {
	assert.True(t, testdata.Foods(testdata.Blueberry).IsValid())
	assert.True(t, testdata.Meat.IsValid())
}

func TestMoreLanguagesDesc(t *testing.T) {
	val := testdata.MoreLanguages(testdata.JavaScript)
	want := "JavaScript is the worst programming language"
	have := val.Desc()
	assert.Equal(t, want, have)
}

func TestFoodsValuesMethod(t *testing.T) {
	want := []testdata.Foods{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa}
	have := testdata.FoodsValues()
	assert.Equal(t, want, have)
}

func TestStatesStringSetString(t *testing.T) {
	var val testdata.States
	val.SetFlag(true, testdata.Active, testdata.Hovered, testdata.Focused)
	orig := val
	want := "focused|vered|currently-being-pressed-by-user"
	have := val.String()
	assert.Equal(t, want, have)
	assert.NoError(t, val.SetString(have))
	assert.Equal(t, orig, val)
}

func TestStatesSetStringString(t *testing.T) {
	src := "enabled|focused|selected"
	var want testdata.States
	want.SetFlag(true, testdata.Enabled, testdata.Focused, testdata.Selected)
	var have testdata.States
	assert.NoError(t, have.SetString(src))
	assert.Equal(t, want, have)
	str := have.String()
	assert.Equal(t, src, str)
}

func TestLanguagesString(t *testing.T) {
	var val testdata.Languages
	val.SetFlag(true, testdata.Dart, testdata.Go, testdata.Kotlin, testdata.JavaScript)
	want := "Go|JavaScript|Dart|Kotlin"
	have := val.String()
	assert.Equal(t, want, have)
}

func TestMoreLanguagesString(t *testing.T) {
	var val testdata.MoreLanguages
	val.SetFlag(true, testdata.Go, testdata.Perl, testdata.Python, testdata.Dart)
	val.SetFlag(false, testdata.Python)
	want := "Go|Dart|Perl"
	have := val.String()
	assert.Equal(t, want, have)
}

func TestMoreLanguagesSetString(t *testing.T) {
	src := "Perl|JavaScript|Kotlin"
	var have testdata.MoreLanguages
	var want testdata.MoreLanguages
	want.SetFlag(true, testdata.Perl, testdata.JavaScript, testdata.Kotlin)
	assert.NoError(t, have.SetString(src))
	assert.Equal(t, want, have)
}

func TestMoreLanguagesValuesGlobal(t *testing.T) {
	// need to use loop to get slice of enums.Enum without typing in constant name for everything
	wantl := []testdata.Languages{6, 10, 14, 18, 22, 26, 30, 34, 38, 42, 46, 50, 54, 55}
	want := []enums.Enum{}
	for _, i := range wantl {
		if i == 55 { // last one is MoreLanguages
			want = append(want, testdata.MoreLanguages(i))
		} else {
			want = append(want, i)
		}
	}
	have := testdata.MoreLanguagesN.Values()
	assert.Equal(t, want, have)
}
